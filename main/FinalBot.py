import telebot
import mysql.connector as mysql_connector
import json

from telebot.types import *
from Parser import *
from FinalKeyboard import main_keyboard, no_vip_keyboard, pagination_keyboard
from datetime import datetime, timedelta


# Texts to answer of bot
def all_text() -> dict:
    with open('config.json', 'r', encoding='utf-8') as file:
        data_text = json.load(file)
    return data_text


# Create connection with database
CONNECTION = mysql_connector.connect(user='root', password='domestosroot50',
                                     host='127.0.0.1', database='database1',
                                     auth_plugin='mysql_native_password',
                                     port=3306)
CURSOR = CONNECTION.cursor(buffered=True)

# Bot settings
TOKEN = all_text()['token']
BOT = telebot.TeleBot(token=TOKEN)
# ! Prices options
# PRICES = [
#     LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü', amount=300)
# ]
# SHIPPING_OPTIONS = [
#     ShippingOption(id='instant',
#                    title='Vip-–ø–æ–¥–ø–∏—Å–∫–∞').add_price(
#                        LabeledPrice(label='Vip-–ø–æ–¥–ø–∏—Å–∫–∞',
#                                     amount=300)
#     )
# ]
# Liqpay token
PROVIDER_TOKEN = all_text()['provider_token']
DATA = {}


# Get all titles of compaines that in database, set it and sort by alphabet
def get_all_titles():
    CURSOR.execute('SELECT recipient FROM database1.telegram_parser_comment;')
    all_titles = CURSOR.fetchall()

    # Write to set for unique
    set_of_titles = set()
    for item in all_titles:
        set_of_titles.add(item[0])

    # Sort
    list_of_titles = list(sorted(list(set_of_titles)))
    return list_of_titles


# Check subcription till
def check_date(chat_id: int) -> None:
    today_now = datetime.timestamp(datetime.now())

    CURSOR.execute('SELECT activation_till FROM database1.profiles '
                   f'WHERE id_user={chat_id};')
    current_activation_till = CURSOR.fetchone()

    if (current_activation_till is not None and
            today_now > current_activation_till[0]):

        CURSOR.execute("UPDATE database1.profiles SET "
                       f"vip=False, activation_date=0, "
                       f"activation_till=0, subscription=False, "
                       f"need_vip=False WHERE id_user={chat_id};")
        CONNECTION.commit()


# Check on 1 request
def check_today(chat_id: int) -> None:
    today_now = datetime.timestamp(datetime.now())
    try:
        till_date_today = DATA[f'{chat_id}_today_till']

        if today_now > till_date_today:
            del DATA[f'{chat_id}_today_till']
            DATA[f'{chat_id}_count_requests'] = 0
    except KeyError:
        pass


# Template for string
def template_final_string(current_comments: list, chat_id: int) -> str:
    result_string = ''

    start = DATA[f'{chat_id}_start']
    end = DATA[f'{chat_id}_end']

    for even_comment in current_comments[start:end]:
        result_string += (f"üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {even_comment[1]} - "
                          f"{even_comment[2]}\n"
                          f"üìÖ –î–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {even_comment[3]}\n"
                          f"‚è∞ –î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {even_comment[4]}\n"
                          f"üè≥Ô∏è –°—Ç—Ä–∞–Ω—ã –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {even_comment[5]} - "
                          f"{even_comment[6]}\n"
                          f'üë§–û—Ç–∑—ã–≤ –æ <a href="{even_comment[10]}">'
                          f'{even_comment[9]}</a> –æ—Ç '
                          f'<a href="{even_comment[8]}">'
                          f'{even_comment[7]}</a>\n'
                          f"üì∞ –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: {even_comment[11]}\n\n")
    return result_string


# Template for output a result string
def output_result_string(current_comments: list, current_user: tuple,
                         message: Message) -> None:
    # Check on existing
    if current_comments == []:
        keyboard = main_keyboard()
        BOT.send_message(chat_id=message.chat.id,
                         text='–ö–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –Ω–µ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. '
                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                         reply_markup=keyboard)
    else:
        # If user have vip subcription
        if current_user[1] == 1:
            result_string = template_final_string(
                current_comments=current_comments,
                chat_id=message.chat.id
            )
            DATA[f'{message.chat.id}_comments'] = current_comments

            # Register today's request
            DATA[f'{message.chat.id}_count_requests'] += 1
            if f'{message.chat.id}_today_till' not in DATA.keys():
                DATA[f'{message.chat.id}_today_till'] = datetime.timestamp(
                    datetime.now() + timedelta(days=1)
                )

            # Check in order to output pagination
            if len(current_comments) > 3:
                BOT.send_message(chat_id=message.chat.id,
                                 text=result_string,
                                 disable_web_page_preview=True,
                                 reply_markup=pagination_keyboard(
                                     left=False
                                 ), parse_mode='HTML')
            else:
                # Without pagination
                BOT.send_message(chat_id=message.chat.id,
                                 text=result_string, parse_mode='Markdown',
                                 disable_web_page_preview=True)
        else:
            # If user don't do request yet
            if DATA[f'{message.chat.id}_count_requests'] <= 0:
                result_string = template_final_string(
                    current_comments=current_comments,
                    chat_id=message.chat.id
                )
                DATA[f'{message.chat.id}_comments'] = current_comments

                # Register today's request
                DATA[f'{message.chat.id}_count_requests'] += 1
                if f'{message.chat.id}_today_till' not in DATA.keys():
                    DATA[
                        f'{message.chat.id}_today_till'
                    ] = datetime.timestamp(
                        datetime.now() + timedelta(days=1)
                    )

                # Check in order to output pagination
                if len(current_comments) > 3:
                    BOT.send_message(chat_id=message.chat.id,
                                     text=result_string,
                                     disable_web_page_preview=True,
                                     reply_markup=pagination_keyboard(
                                         left=False
                                     ), parse_mode='HTML')
                else:
                    # Without pagination
                    BOT.send_message(chat_id=message.chat.id,
                                     text=result_string, parse_mode='Markdown',
                                     disable_web_page_preview=True)
            else:
                # If user already did request today
                BOT.send_message(chat_id=message.chat.id,
                                 text='–ó–∞–ø—Ä–æ—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–¥–µ–ª–∞–Ω.\n\n'
                                 '–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–∑—ã–≤—ã '
                                 '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞, –ª–∏–±–æ '
                                 '–ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞.',
                                 reply_markup=no_vip_keyboard())


# Add pages in commets
def add_to_buttons(call: CallbackQuery):
    DATA[f'{call.from_user.id}_start'] += 3
    DATA[f'{call.from_user.id}_end'] += 3


# Remove pages in comments
def remove_from_buttons(call: CallbackQuery):
    DATA[f'{call.from_user.id}_start'] -= 3
    DATA[f'{call.from_user.id}_end'] -= 3


@BOT.message_handler(commands=['start'])
def on_start(message: Message) -> None:
    get_all_titles()

    # Parser class instance
    # parser = Parser()
    # DATA[f'{message.chat.id}_parser'] = parser
    DATA[f'{message.chat.id}_count_requests'] = 0

    # Check on
    check_date(chat_id=message.chat.id)
    check_today(chat_id=message.chat.id)

    # Try to get a user
    CURSOR.execute("SELECT * FROM database1.profiles "
                   f"WHERE id_user={message.chat.id};")
    current_user = CURSOR.fetchone()

    first_name = message.from_user.first_name
    last_name = message.from_user.first_name

    # Create user if he/she doesn't exist
    if current_user is None:
        CURSOR.execute("INSERT INTO database1.profiles"
                       "(vip, activation_date, activation_till, id_user, "
                       "subscription, need_vip, credentials) "
                       f"VALUES(False, 0, 0, '{message.chat.id}', False, "
                       f"False, '{first_name} {last_name}')")
        CONNECTION.commit()

    keyboard = main_keyboard()
    BOT.send_message(chat_id=message.chat.id,
                     text=all_text()['greeting'], reply_markup=keyboard)


# If inline query is null
@BOT.inline_handler(func=lambda query: len(query.query) == 0)
def default_query(query: InlineQuery) -> None:
    response = InlineQueryResultArticle(
        id='1', title='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
        input_message_content=InputTextMessageContent(
            message_text='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'
        ),
        description='–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö '
                    '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
    BOT.answer_inline_query(inline_query_id=query.id, results=[response])


# Create drop-up menu
@BOT.inline_handler(func=lambda query: True)
def query_get(query: InlineQuery) -> None:
    try:
        # Get user message
        user_message = query.query
        print(user_message)
        # possible_variants = DATA[
        #     f'{query.from_user.id}_parser'
        # ].get_variants(user_message)['items']
        # print(possible_variants[0])
        possible_variants = get_all_titles()
        final_inline_query = []

        point = 1
        # Add point to drop-up menu
        for item in possible_variants:
            if user_message.lower() in item.lower() or \
                    user_message.lower() == item.lower():
                response = InlineQueryResultArticle(
                    id=f"{point}",
                    title=f"{item}",
                    input_message_content=InputTextMessageContent(f"/{item}/")
                )
                final_inline_query.append(response)
                point += 1

        BOT.answer_inline_query(inline_query_id=query.id,
                                results=final_inline_query)
    except Exception as error:
        print(error)


# ! Successful payment
# @BOT.message_handler(content_types=['successful_payment'])
# def got_payment(message: Message) -> None:
#     # Get now-time, set now + 30 days
#     now_time = datetime.timestamp(datetime.now())
#     through_month = datetime.timestamp(datetime.now() + timedelta(days=30))
#     print(message)

#     charged_id = (
#         message.successful_payment.provider_payment_charge_id
#     ).replace('_', '')
#     print(charged_id)

#     # Write to table 'activations' for protocol
# CURSOR.execute('INSERT INTO database1.activations(id_user, purchase_date, '
#                    'activation_till, provider_payment_charge_id) VALUES'
#                    f'({message.chat.id}, {now_time}, {through_month}, '
#                    f"'{charged_id}')")
#     CONNECTION.commit()

#     # Take to user vip-subscription
#     CURSOR.execute("UPDATE database1.profiles SET "
#                    f"vip=True, activation_date={now_time}, "
#                    f"activation_till={through_month}, subscription=False "
#                    f"WHERE id_user={message.chat.id};")
#     CONNECTION.commit()

#     BOT.send_message(chat_id=message.chat.id,
#                      text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ '
#                      f'`{message.successful_payment.total_amount / 100} '
#                      f'{message.successful_payment.currency}` \n\n'
#                           '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', parse_mode='Markdown',
#                           reply_markup=main_keyboard())


# Get title of company and take all comments about it
@BOT.message_handler(content_types=['text'])
def get_company(message: Message) -> None:
    check_date(chat_id=message.chat.id)
    check_today(chat_id=message.chat.id)

    if message.text[0] == '/' and message.text[-1] == '/':
        # Slice a text of message
        user_message = message.text[1:-1]

        # Get user
        CURSOR.execute("SELECT * FROM database1.profiles "
                       f"WHERE id_user={message.chat.id};")
        current_user = CURSOR.fetchone()

        # Get all comments on current company
        CURSOR.execute(f"SELECT * FROM database1.telegram_parser_comment "
                       f"WHERE recipient='{user_message}';")
        current_comments = CURSOR.fetchall()
        print(current_comments)

        DATA[f'{message.from_user.id}_start'] = 0
        DATA[f'{message.from_user.id}_end'] = 3

        output_result_string(current_comments=current_comments,
                             current_user=current_user, message=message)
    else:
        BOT.send_message(chat_id=message.chat.id,
                         text='–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω—ã–π –í–∞–º–∏ —Ç–µ–∫—Å—Ç')


# Get link on a company and and take all comments about it
def get_url(message: Message) -> None:
    check_date(chat_id=message.chat.id)
    check_today(chat_id=message.chat.id)

    # Get user message and check it
    user_message = message.text
    if user_message[-1] != '/':
        user_message += '/'

    # Get user
    CURSOR.execute("SELECT * FROM database1.profiles "
                   f"WHERE id_user={message.chat.id};")
    current_user = CURSOR.fetchone()

    # Get all comments on current company
    CURSOR.execute(f"SELECT * FROM database1.telegram_parser_comment "
                   f"WHERE recipient_link='{user_message}';")
    current_comments = CURSOR.fetchall()
    print(current_comments)

    DATA[f'{message.from_user.id}_start'] = 0
    DATA[f'{message.from_user.id}_end'] = 3

    output_result_string(current_comments=current_comments,
                         current_user=current_user, message=message)

# Get all callbacks
@BOT.callback_query_handler(func=lambda call: True)
def get_calls(call: CallbackQuery) -> None:
    check_date(chat_id=call.from_user.id)
    check_today(chat_id=call.from_user.id)

    if call.data == 'by_link':
        # Get link it self
        some = BOT.send_message(chat_id=call.from_user.id,
                                text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é')
        BOT.register_next_step_handler(some, get_url)

    # ! Invoice sending
    elif call.data == 'no_vip':
        # BOT.send_invoice(chat_id=call.from_user.id, title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü'
        #                  description='–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ, '
        #                              '—á–µ–º 1 –∑–∞–ø—Ä–æ—Å –≤ –¥–µ–Ω—å, '
        #                              '–∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 99 UAH',
        #                  provider_token=PROVIDER_TOKEN, currency='UAH',
        #                  is_flexible=False, prices=PRICES,
        #                  start_parameter='subscription-example',
        #                  invoice_payload='subcription coupon')

        BOT.send_message(chat_id=call.from_user.id,
                         text='–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ '
                              '–ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n'
                              'https://send.monobank.ua/6Qv6mVbS6y\n\n'
                              '–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à '
                              f'Telegram ID: `{call.from_user.id}`\n'
                              '–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º '
                              '–í–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å',
                              parse_mode='Markdown')

    elif call.data == 'vip':
        # Get users vip options
        CURSOR.execute(
            'SELECT * FROM database1.profiles '
            f'WHERE id_user={call.from_user.id};'
        )
        current_user = CURSOR.fetchone()

        # Create request for vip-subscription
        CURSOR.execute("UPDATE database1.profiles SET "
                       f"vip=False, activation_date=0, "
                       f"activation_till=0, subscription=False, "
                       f"need_vip=True WHERE id_user={call.from_user.id};")
        CONNECTION.commit()

        string = ''
        if current_user[1] == 0:
            string += 'üëë VIP:  `–ù–µ—Ç`\n'
        else:
            string += 'üëë VIP:  `–ï—Å—Ç—å`\n'

        if current_user[2] != 0 and current_user[3] != 0 and \
                current_user[3] - current_user[2] != 0:
            first_date = datetime.fromtimestamp(
                current_user[2]
            ).strftime(r'%d.%m.%Y %H:%M:%S')
            second_date = datetime.fromtimestamp(
                current_user[3]
            ).strftime(r'%d.%m.%Y %H:%M:%S')
            end_of_subscription = current_user[3] - current_user[2]
            third_date = datetime.fromtimestamp(
                end_of_subscription
            ).strftime(r'%d –¥–Ω–µ–π')
        else:
            first_date = current_user[2]
            second_date = current_user[3]
            third_date = current_user[3] - current_user[2]

        string += (f'–î–µ–Ω—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:  `{first_date}`\n'
                   f'–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:  `{second_date}`\n'
                   f'–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: `{third_date}`\n')

        if current_user[1] == 0:
            BOT.send_message(chat_id=call.from_user.id,
                             text=string, parse_mode='Markdown',
                             reply_markup=no_vip_keyboard())
        else:
            BOT.send_message(chat_id=call.from_user.id,
                             text=string, parse_mode='Markdown')

    # On right button
    elif call.data == 'right':
        # Get comments from dict
        comments = DATA[f'{call.from_user.id}_comments']

        # On end
        if len(comments) - DATA[f'{call.from_user.id}_end'] <= 3:
            add_to_buttons(call=call)
            keyboard = pagination_keyboard(right=False)

        elif DATA[f'{call.from_user.id}_end'] + 3 < len(comments):
            add_to_buttons(call=call)
            keyboard = pagination_keyboard()

        elif DATA[f'{call.from_user.id}_end'] + 3 == len(comments):
            add_to_buttons(call=call)
            keyboard = pagination_keyboard(right=False)

        else:
            start = DATA[f'{call.from_user.id}_start']
            end = DATA[f'{call.from_user.id}_end']

            keyboard = pagination_keyboard(right=False)

        # Edit message and pagination menu
        result_string = template_final_string(current_comments=comments,
                                              chat_id=call.from_user.id)
        BOT.edit_message_text(text=result_string, chat_id=call.from_user.id,
                              message_id=call.message.message_id,
                              disable_web_page_preview=True,
                              reply_markup=keyboard, parse_mode='HTML')

    # On left button
    elif call.data == 'left':
        # Get comments from dict
        comments = DATA[f'{call.from_user.id}_comments']

        # On start
        if DATA[f'{call.from_user.id}_start'] - 3 <= 0:
            remove_from_buttons(call=call)
            keyboard = pagination_keyboard(left=False)

        elif DATA[f'{call.from_user.id}_start'] - 3 > 0:
            remove_from_buttons(call=call)
            keyboard = pagination_keyboard()

        # Edit message and pagination menu
        result_string = template_final_string(current_comments=comments,
                                              chat_id=call.from_user.id)
        BOT.edit_message_text(text=result_string, chat_id=call.from_user.id,
                              message_id=call.message.message_id,
                              disable_web_page_preview=True,
                              reply_markup=keyboard, parse_mode='HTML')

    # Output menu
    elif call.data == 'menu':
        keyboard = main_keyboard()
        BOT.send_message(chat_id=call.from_user.id,
                         text='–í—ã–±–µ—Ä–µ –Ω—É–∂–Ω—ã–π –í–∞–º –ø—É–Ω–∫—Ç', reply_markup=keyboard)


# ! Get all shipping query
# @BOT.shipping_query_handler(func=lambda query: True)
# def shipping(shipping_query: ShippingQuery) -> None:
#     print(shipping_query)
#     BOT.answer_shipping_query(shipping_query_id=shipping_query.id, ok=True,
#                               shipping_options=SHIPPING_OPTIONS,
#                               error_message='–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–∞. '
#                                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.')


# ! Get all pre checkout query
# @BOT.pre_checkout_query_handler(func=lambda query: True)
# def checkout(pre_checkout_query: PreCheckoutQuery) -> None:
#     print(pre_checkout_query)
#     BOT.answer_pre_checkout_query(pre_checkout_query_id=pre_checkout_query.id,
#                                   ok=True,
#                                   error_message="–ù–µ–∫—Ç–æ —Ö–æ—á–µ—Ç —É–∫—Ä–∞—Å—Ç—å "
#                                                 "CVV –í–∞—à–µ–π –∫–∞—Ä—Ç—ã, –Ω–æ –º—ã "
#                                                 "—É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –í–∞—à–∏ "
#                                            "–¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å "
#                                                 "—Å–Ω–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö "
#                                                 "–º–∏–Ω—É—Ç. –ù–∞–º –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π "
#                                                 "–ø–µ—Ä–µ—Ä—ã–≤.")


# Else block for all bot
@BOT.message_handler(content_types=['location', 'photo', 'video', 'text'])
def else_block(message: Message) -> None:
    BOT.send_message(chat_id=message.chat.id,
                     text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... '
                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                     parse_mode='HTML')


BOT.polling(none_stop=True)
